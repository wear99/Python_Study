# 在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，
# 这样，就隐藏了内部的复杂逻辑。
# 但外部代码还是可以自由地修改一个实例的姓名、成绩属性：
# 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例
# 的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问

class 学生(object):
    def __init__(self, 姓名,成绩):
        self.__姓名=姓名
        self.__成绩=成绩

    # 但是如果外部代码要获取姓名/成绩怎么办？可以给Student类增加get_姓名
    # 和get_成绩这样的方法：
    
    def get_姓名(self):
        return self.__姓名

    def get_成绩(self):
        return self.__成绩

    # 如果外部代码要修改,可以增加set_姓名 这样的方法:
    # 通过方法的形式,可以对传入的参数进行检查,避免无效参数导致的错误
    def set_成绩(self,成绩):
        if isinstance(成绩,int):   # 对传入的 成绩的类型进行判断
            self.__成绩=成绩
        else:
            print('不是数字格式')    


sun=学生('孙',100)

# print(sun.__姓名)   这句会出错,提升类里面不存在这个属性

# get_姓名是一个方法,所有后面要加()
print(sun.get_姓名())
print(sun.get_成绩())

# 调用set_成绩 这个方法来修改类内部的属性
sun.set_成绩(99)

print(sun.get_成绩())
