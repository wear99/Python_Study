# 类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，
# 每个对象都拥有相同的方法，但各自的数据可能不同。


# 首先要定义类,指定从哪继承
class 学生(object):

    # 也可以定义类的属性,这样实例就会自动具备这个属性
    性别='女'

    # 定义类的实例有什么属性,定义了之后,再生成实例的时候就必须传入这些参数
    def __init__(self, 姓名, 学号, 成绩):
        self.姓名 = 姓名
        self.学号 = 学号
        self.成绩 = 成绩

    # 数据封装,直接在类里面定义好获得属性的函数,不用外界再调用print.
    # 这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法

    def 打印成绩(self):
        print('%s,%d'% (self.姓名,self.成绩))

# 根据学生这个类,建立了sun这个实例.
sun = 学生('孙', 36, 100)

liu = 学生('刘', 33, 99)

# 调用了sun这个实例里 姓名/学号/成绩 的属性
print(sun.姓名)
print(sun.学号)
print(sun.成绩)

# 实例虽然没有 性别这个属性,但类有
print(sun.性别)
# 调用了sun这个实例里面打印成绩这个函数(也叫方法),后面要加()
sun.打印成绩()

'''
小结
类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；
方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；
通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。
和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是
同一个类的不同实例，但拥有的变量名称都可能不同.
'''