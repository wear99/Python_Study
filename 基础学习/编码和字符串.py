# 因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理
# ASCII, 只包含了英文字母和数字. 所以不能显示中文
# Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码. 最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）
# UTF-8编码, UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节.

# 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码
# 由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，
# 就需要把str变为以字节为单位的bytes

# 以Unicode表示的str通过encode()方法可以编码为指定的bytes
print('中文'.encode('utf-8'))  # Python对bytes类型的数据用带b前缀的单引号或双引号表示
# 在utf-8中,每个中文用3个字节表示

# 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法
b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')

如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：

>> > b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')

# len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数
len('中文'.encode('utf-8'))

# 当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：

#!/usr/bin/env python3
# -*- coding: utf-8 -*-