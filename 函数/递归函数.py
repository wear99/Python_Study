# 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
# 对于有些特殊问题,使用递归可以大大简化程序

# 计算 从1 到 n 相乘的结果
def 阶乘(n):
    if n == 1:
        return 1

    return n * 阶乘(n-1)   # 5 * ( 4 * ( 3 * ( 2 * (1) )))
# -->阶乘(5)
# --->5* 阶乘(4)
# --->5* 4 * 阶乘(3)
# --->5* 4 * 3* 阶乘(2)
# --->5* 4 * 3* 2* 阶乘(1)
# --->5 * (4 * (3 * (2 * 1)))
# --->5 * (4 * (3 * 2))
# --->5 * (4 * 6)
# --->5 * 24
# --->120

# 递归时一定注意在最后一个数有固定的返回值

print(阶乘(5))

#另一种实现方式:
def fact(n):
    return fact_iter(n, 1)    #增加了结尾数字参数

# 递归函数
def fact_iter(num, product): 
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)

# ===> fact_iter(5, 1)
# ===> fact_iter(4, 5)
# ===> fact_iter(3, 20)
# ===> fact_iter(2, 60)
# ===> fact_iter(1, 120)
# ===> 120


# 使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
# 针对尾递归优化的语言可以通过尾递归防止栈溢出。
# 尾递归事实上和循环是等价的